{"ast":null,"code":"var _jsxFileName = \"D:\\\\development\\\\torum\\\\webRTC-advanced (1)\\\\webRTC-advanced\\\\to-be-deployed\\\\my-app\\\\src\\\\JoinRoomPage\\\\JoinRoomContent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport JoinRoomInputs from \"./JoinRoomInputs\";\nimport { connect } from \"react-redux\";\nimport OnlyWithAudioCheckbox from \"./OnlyWithAudioCheckbox\";\nimport { setConnectOnlyWithAudio, setIdentity, setRoomId } from \"../store/actions\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport JoinRoomButtons from \"./JoinRoomButtons\";\nimport { useHistory } from \"react-router-dom\";\nimport { getRoomExists } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst JoinRoomContent = props => {\n  _s();\n\n  const {\n    isRoomHost,\n    setConnectOnlyWithAudio,\n    connectOnlyWithAudio,\n    setIdentityAction,\n    setRoomIdAction\n  } = props;\n  const [roomIdValue, setRoomIdValue] = useState(\"\");\n  const [nameValue, setNameValue] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const history = useHistory();\n\n  const handleJoinRoom = async () => {\n    setIdentityAction(nameValue);\n\n    if (isRoomHost) {\n      createRoom();\n    } else {\n      await joinRoom();\n    }\n  };\n\n  const joinRoom = async () => {\n    const responseMessage = await getRoomExists(roomIdValue);\n    const {\n      roomExists,\n      full\n    } = responseMessage;\n\n    if (roomExists) {\n      if (full) {\n        setErrorMessage(\"Meeting is full. Please try again later.\");\n      } else {\n        // join a room !\n        setRoomIdAction(roomIdValue);\n        history.push(\"/room\");\n      }\n    } else {\n      setErrorMessage(\"Meeting not found. Check your meeting id.\");\n    }\n  };\n\n  const createRoom = () => {\n    history.push(\"/room\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(JoinRoomInputs, {\n      roomIdValue: roomIdValue,\n      setRoomIdValue: setRoomIdValue,\n      nameValue: nameValue,\n      setNameValue: setNameValue,\n      isRoomHost: isRoomHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OnlyWithAudioCheckbox, {\n      setConnectOnlyWithAudio: setConnectOnlyWithAudio,\n      connectOnlyWithAudio: connectOnlyWithAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JoinRoomButtons, {\n      handleJoinRoom: handleJoinRoom,\n      isRoomHost: isRoomHost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(JoinRoomContent, \"xLBWKKPMX3TXdgSsqc7isxvUWeY=\", false, function () {\n  return [useHistory];\n});\n\n_c = JoinRoomContent;\n\nconst mapStoreStateToProps = state => {\n  return { ...state\n  };\n};\n\nconst mapActionsToProps = dispatch => {\n  return {\n    setConnectOnlyWithAudio: onlyWithAudio => dispatch(setConnectOnlyWithAudio(onlyWithAudio)),\n    setIdentityAction: identity => dispatch(setIdentity(identity)),\n    setRoomIdAction: roomId => dispatch(setRoomId(roomId))\n  };\n};\n\nexport default connect(mapStoreStateToProps, mapActionsToProps)(JoinRoomContent);\n\nvar _c;\n\n$RefreshReg$(_c, \"JoinRoomContent\");","map":{"version":3,"sources":["D:/development/torum/webRTC-advanced (1)/webRTC-advanced/to-be-deployed/my-app/src/JoinRoomPage/JoinRoomContent.js"],"names":["React","useState","JoinRoomInputs","connect","OnlyWithAudioCheckbox","setConnectOnlyWithAudio","setIdentity","setRoomId","ErrorMessage","JoinRoomButtons","useHistory","getRoomExists","JoinRoomContent","props","isRoomHost","connectOnlyWithAudio","setIdentityAction","setRoomIdAction","roomIdValue","setRoomIdValue","nameValue","setNameValue","errorMessage","setErrorMessage","history","handleJoinRoom","createRoom","joinRoom","responseMessage","roomExists","full","push","mapStoreStateToProps","state","mapActionsToProps","dispatch","onlyWithAudio","identity","roomId"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport JoinRoomInputs from \"./JoinRoomInputs\";\r\nimport { connect } from \"react-redux\";\r\nimport OnlyWithAudioCheckbox from \"./OnlyWithAudioCheckbox\";\r\nimport {\r\n  setConnectOnlyWithAudio,\r\n  setIdentity,\r\n  setRoomId,\r\n} from \"../store/actions\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport JoinRoomButtons from \"./JoinRoomButtons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getRoomExists } from \"../utils/api\";\r\n\r\nconst JoinRoomContent = (props) => {\r\n  const {\r\n    isRoomHost,\r\n    setConnectOnlyWithAudio,\r\n    connectOnlyWithAudio,\r\n    setIdentityAction,\r\n    setRoomIdAction,\r\n  } = props;\r\n\r\n  const [roomIdValue, setRoomIdValue] = useState(\"\");\r\n  const [nameValue, setNameValue] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  const history = useHistory();\r\n\r\n  const handleJoinRoom = async () => {\r\n    setIdentityAction(nameValue);\r\n    if (isRoomHost) {\r\n      createRoom();\r\n    } else {\r\n      await joinRoom();\r\n    }\r\n  };\r\n\r\n  const joinRoom = async () => {\r\n    const responseMessage = await getRoomExists(roomIdValue);\r\n\r\n    const { roomExists, full } = responseMessage;\r\n\r\n    if (roomExists) {\r\n      if (full) {\r\n        setErrorMessage(\"Meeting is full. Please try again later.\");\r\n      } else {\r\n        // join a room !\r\n        setRoomIdAction(roomIdValue);\r\n        history.push(\"/room\");\r\n      }\r\n    } else {\r\n      setErrorMessage(\"Meeting not found. Check your meeting id.\");\r\n    }\r\n  };\r\n\r\n  const createRoom = () => {\r\n    history.push(\"/room\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <JoinRoomInputs\r\n        roomIdValue={roomIdValue}\r\n        setRoomIdValue={setRoomIdValue}\r\n        nameValue={nameValue}\r\n        setNameValue={setNameValue}\r\n        isRoomHost={isRoomHost}\r\n      />\r\n      <OnlyWithAudioCheckbox\r\n        setConnectOnlyWithAudio={setConnectOnlyWithAudio}\r\n        connectOnlyWithAudio={connectOnlyWithAudio}\r\n      />\r\n      <ErrorMessage errorMessage={errorMessage} />\r\n      <JoinRoomButtons\r\n        handleJoinRoom={handleJoinRoom}\r\n        isRoomHost={isRoomHost}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStoreStateToProps = (state) => {\r\n  return {\r\n    ...state,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = (dispatch) => {\r\n  return {\r\n    setConnectOnlyWithAudio: (onlyWithAudio) =>\r\n      dispatch(setConnectOnlyWithAudio(onlyWithAudio)),\r\n    setIdentityAction: (identity) => dispatch(setIdentity(identity)),\r\n    setRoomIdAction: (roomId) => dispatch(setRoomId(roomId)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStoreStateToProps,\r\n  mapActionsToProps\r\n)(JoinRoomContent);\r\n"]},"metadata":{},"sourceType":"module"}