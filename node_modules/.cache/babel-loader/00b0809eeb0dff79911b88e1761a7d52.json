{"ast":null,"code":"import io from \"socket.io-client\";\nimport { setRoomId, setParticipants } from \"../store/actions\";\nimport store from \"../store/store\";\nimport * as webRTCHandler from \"./webRTCHandler\"; // const SERVER = \"http://localhost:5002\";\n// const SERVER = \"https://webrtc-torum.herokuapp.com/\";\n\nconst SERVER = \"https://websocket.api.torum.team/\";\nlet socket = null;\nexport const connectWithSocketIOServer = () => {\n  // let token = localStorage.getItem(\"access_token\")\n  let token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hdXRoLmRldi50b3J1bS50ZWFtXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNjQzMzUxNzU2LCJleHAiOjE2NDM5NTE3NTYsIm5iZiI6MTY0MzM1MTc1NiwianRpIjoiNUdkSnJFRHlXSWYzYmk3UyIsInN1YiI6IjYxZGJlNzViM2Q3MDM5NmZmYzRmZTJhMiIsInBydiI6Ijg3ZTBhZjFlZjlmZDE1ODEyZmRlYzk3MTUzYTE0ZTBiMDQ3NTQ2YWEifQ.tM9RQQN_icOig5TKgaIyY4EyH9O1XOgw0PMB20YzycA';\n  socket = io(SERVER, {\n    query: {\n      token: token\n    }\n  });\n  socket.on(\"connect\", () => {\n    console.log(\"successfully connected with socket io server\");\n    console.log(socket.id);\n  });\n  socket.on(\"room-id\", data => {\n    const {\n      roomId\n    } = data;\n    store.dispatch(setRoomId(roomId));\n  });\n  socket.on(\"room-update\", data => {\n    const {\n      connectedUsers\n    } = data;\n    store.dispatch(setParticipants(connectedUsers));\n  });\n  socket.on(\"conn-prepare\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false); // inform the user which just join the room that we have prepared for incoming connection\n\n    socket.emit(\"conn-init\", {\n      connUserSocketId: connUserSocketId\n    });\n  });\n  socket.on(\"conn-signal\", data => {\n    webRTCHandler.handleSignalingData(data);\n  });\n  socket.on(\"conn-init\", data => {\n    const {\n      connUserSocketId\n    } = data;\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\n  });\n  socket.on(\"user-disconnected\", data => {\n    webRTCHandler.removePeerConnection(data);\n  });\n};\nexport const createNewRoom = (identity, onlyAudio) => {\n  // emit an event to server that we would like to create new room\n  const data = {\n    identity,\n    onlyAudio\n  };\n  socket.emit(\"create-new-room\", data);\n};\nexport const joinRoom = (identity, roomId, onlyAudio) => {\n  //emit an event to server that we would to join a room\n  const data = {\n    roomId,\n    identity,\n    onlyAudio\n  };\n  socket.emit(\"join-room\", data);\n};\nexport const signalPeerData = data => {\n  socket.emit(\"conn-signal\", data);\n};","map":{"version":3,"sources":["D:/development/torum/webRTC-advanced (1)/webRTC-advanced/to-be-deployed/my-app/src/utils/wss.js"],"names":["io","setRoomId","setParticipants","store","webRTCHandler","SERVER","socket","connectWithSocketIOServer","token","query","on","console","log","id","data","roomId","dispatch","connectedUsers","connUserSocketId","prepareNewPeerConnection","emit","handleSignalingData","removePeerConnection","createNewRoom","identity","onlyAudio","joinRoom","signalPeerData"],"mappings":"AAAA,OAAOA,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,kBAA3C;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;AACA;;AACA,MAAMC,MAAM,GAAG,mCAAf;AAEA,IAAIC,MAAM,GAAG,IAAb;AAEA,OAAO,MAAMC,yBAAyB,GAAG,MAAM;AAC7C;AACA,MAAIC,KAAK,GAAG,iXAAZ;AACAF,EAAAA,MAAM,GAAGN,EAAE,CAACK,MAAD,EAAQ;AACjBI,IAAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAEA;AAAT;AADU,GAAR,CAAX;AAIAF,EAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACO,EAAnB;AACD,GAHD;AAKAP,EAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAsBI,IAAD,IAAU;AAC7B,UAAM;AAAEC,MAAAA;AAAF,QAAaD,IAAnB;AACAX,IAAAA,KAAK,CAACa,QAAN,CAAef,SAAS,CAACc,MAAD,CAAxB;AACD,GAHD;AAKAT,EAAAA,MAAM,CAACI,EAAP,CAAU,aAAV,EAA0BI,IAAD,IAAU;AACjC,UAAM;AAAEG,MAAAA;AAAF,QAAqBH,IAA3B;AACAX,IAAAA,KAAK,CAACa,QAAN,CAAed,eAAe,CAACe,cAAD,CAA9B;AACD,GAHD;AAKAX,EAAAA,MAAM,CAACI,EAAP,CAAU,cAAV,EAA2BI,IAAD,IAAU;AAClC,UAAM;AAAEI,MAAAA;AAAF,QAAuBJ,IAA7B;AAEAV,IAAAA,aAAa,CAACe,wBAAd,CAAuCD,gBAAvC,EAAyD,KAAzD,EAHkC,CAKlC;;AACAZ,IAAAA,MAAM,CAACc,IAAP,CAAY,WAAZ,EAAyB;AAAEF,MAAAA,gBAAgB,EAAEA;AAApB,KAAzB;AACD,GAPD;AASAZ,EAAAA,MAAM,CAACI,EAAP,CAAU,aAAV,EAA0BI,IAAD,IAAU;AACjCV,IAAAA,aAAa,CAACiB,mBAAd,CAAkCP,IAAlC;AACD,GAFD;AAIAR,EAAAA,MAAM,CAACI,EAAP,CAAU,WAAV,EAAwBI,IAAD,IAAU;AAC/B,UAAM;AAAEI,MAAAA;AAAF,QAAuBJ,IAA7B;AACAV,IAAAA,aAAa,CAACe,wBAAd,CAAuCD,gBAAvC,EAAyD,IAAzD;AACD,GAHD;AAKAZ,EAAAA,MAAM,CAACI,EAAP,CAAU,mBAAV,EAAgCI,IAAD,IAAU;AACvCV,IAAAA,aAAa,CAACkB,oBAAd,CAAmCR,IAAnC;AACD,GAFD;AAGD,CA3CM;AA6CP,OAAO,MAAMS,aAAa,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACpD;AACA,QAAMX,IAAI,GAAG;AACXU,IAAAA,QADW;AAEXC,IAAAA;AAFW,GAAb;AAKAnB,EAAAA,MAAM,CAACc,IAAP,CAAY,iBAAZ,EAA+BN,IAA/B;AACD,CARM;AAUP,OAAO,MAAMY,QAAQ,GAAG,CAACF,QAAD,EAAWT,MAAX,EAAmBU,SAAnB,KAAiC;AACvD;AACA,QAAMX,IAAI,GAAG;AACXC,IAAAA,MADW;AAEXS,IAAAA,QAFW;AAGXC,IAAAA;AAHW,GAAb;AAMAnB,EAAAA,MAAM,CAACc,IAAP,CAAY,WAAZ,EAAyBN,IAAzB;AACD,CATM;AAWP,OAAO,MAAMa,cAAc,GAAIb,IAAD,IAAU;AACtCR,EAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA2BN,IAA3B;AACD,CAFM","sourcesContent":["import io from \"socket.io-client\";\r\nimport { setRoomId, setParticipants } from \"../store/actions\";\r\nimport store from \"../store/store\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\n// const SERVER = \"http://localhost:5002\";\r\n// const SERVER = \"https://webrtc-torum.herokuapp.com/\";\r\nconst SERVER = \"https://websocket.api.torum.team/\";\r\n\r\nlet socket = null;\r\n\r\nexport const connectWithSocketIOServer = () => {\r\n  // let token = localStorage.getItem(\"access_token\")\r\n  let token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9hdXRoLmRldi50b3J1bS50ZWFtXC9hcGlcL2F1dGhcL2xvZ2luIiwiaWF0IjoxNjQzMzUxNzU2LCJleHAiOjE2NDM5NTE3NTYsIm5iZiI6MTY0MzM1MTc1NiwianRpIjoiNUdkSnJFRHlXSWYzYmk3UyIsInN1YiI6IjYxZGJlNzViM2Q3MDM5NmZmYzRmZTJhMiIsInBydiI6Ijg3ZTBhZjFlZjlmZDE1ODEyZmRlYzk3MTUzYTE0ZTBiMDQ3NTQ2YWEifQ.tM9RQQN_icOig5TKgaIyY4EyH9O1XOgw0PMB20YzycA';\r\n  socket = io(SERVER,{\r\n    query: { token: token },\r\n   });\r\n\r\n  socket.on(\"connect\", () => {\r\n    console.log(\"successfully connected with socket io server\");\r\n    console.log(socket.id);\r\n  });\r\n\r\n  socket.on(\"room-id\", (data) => {\r\n    const { roomId } = data;\r\n    store.dispatch(setRoomId(roomId));\r\n  });\r\n\r\n  socket.on(\"room-update\", (data) => {\r\n    const { connectedUsers } = data;\r\n    store.dispatch(setParticipants(connectedUsers));\r\n  });\r\n\r\n  socket.on(\"conn-prepare\", (data) => {\r\n    const { connUserSocketId } = data;\r\n\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, false);\r\n\r\n    // inform the user which just join the room that we have prepared for incoming connection\r\n    socket.emit(\"conn-init\", { connUserSocketId: connUserSocketId });\r\n  });\r\n\r\n  socket.on(\"conn-signal\", (data) => {\r\n    webRTCHandler.handleSignalingData(data);\r\n  });\r\n\r\n  socket.on(\"conn-init\", (data) => {\r\n    const { connUserSocketId } = data;\r\n    webRTCHandler.prepareNewPeerConnection(connUserSocketId, true);\r\n  });\r\n\r\n  socket.on(\"user-disconnected\", (data) => {\r\n    webRTCHandler.removePeerConnection(data);\r\n  });\r\n};\r\n\r\nexport const createNewRoom = (identity, onlyAudio) => {\r\n  // emit an event to server that we would like to create new room\r\n  const data = {\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"create-new-room\", data);\r\n};\r\n\r\nexport const joinRoom = (identity, roomId, onlyAudio) => {\r\n  //emit an event to server that we would to join a room\r\n  const data = {\r\n    roomId,\r\n    identity,\r\n    onlyAudio,\r\n  };\r\n\r\n  socket.emit(\"join-room\", data);\r\n};\r\n\r\nexport const signalPeerData = (data) => {\r\n  socket.emit(\"conn-signal\", data);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}