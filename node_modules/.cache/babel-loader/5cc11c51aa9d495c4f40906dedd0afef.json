{"ast":null,"code":"import { setShowOverlay, setMessages } from \"../store/actions\";\nimport store from \"../store/store\";\nimport * as wss from \"./wss\";\nimport Peer from \"simple-peer\";\nimport { fetchTURNCredentials, getTurnIceServers } from \"./turn\";\nconst defaultConstraints = {\n  audio: true,\n  video: {\n    width: \"480\",\n    height: \"360\"\n  }\n};\nconst onlyAudioConstraints = {\n  audio: true,\n  video: false\n};\nlet localStream;\nexport const getLocalPreviewAndInitRoomConnection = async (isRoomHost, identity, roomId = null, onlyAudio) => {\n  await fetchTURNCredentials();\n  const constraints = onlyAudio ? onlyAudioConstraints : defaultConstraints;\n  navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n    console.log(\"successfuly received local stream\");\n    localStream = stream;\n    showLocalVideoPreview(localStream); // dispatch an action to hide overlay\n\n    store.dispatch(setShowOverlay(false));\n    isRoomHost ? wss.createNewRoom(identity, onlyAudio) : wss.joinRoom(identity, roomId, onlyAudio);\n  }).catch(err => {\n    console.log(\"error occurred when trying to get an access to local stream\");\n    console.log(err);\n  });\n};\nlet peers = {};\nlet streams = [];\n\nconst getConfiguration = () => {\n  const turnIceServers = getTurnIceServers();\n\n  if (turnIceServers) {\n    return {\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }, ...turnIceServers]\n    };\n  } else {\n    console.warn(\"Using only STUN server\");\n    return {\n      iceServers: [{\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    };\n  }\n};\n\nconst messengerChannel = \"messenger\";\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\n  const configuration = getConfiguration();\n  peers[connUserSocketId] = new Peer({\n    initiator: isInitiator,\n    config: configuration,\n    stream: localStream,\n    channelName: messengerChannel\n  });\n  peers[connUserSocketId].on(\"signal\", data => {\n    // webRTC offer, webRTC Answer (SDP informations), ice candidates\n    const signalData = {\n      signal: data,\n      connUserSocketId: connUserSocketId\n    };\n    wss.signalPeerData(signalData);\n  });\n  peers[connUserSocketId].on(\"stream\", stream => {\n    console.log(\"new stream came\");\n    addStream(stream, connUserSocketId);\n    streams = [...streams, stream];\n  });\n  peers[connUserSocketId].on(\"data\", data => {\n    const messageData = JSON.parse(data);\n    appendNewMessage(messageData);\n  });\n};\nexport const handleSignalingData = data => {\n  //add signaling data to peer connection\n  peers[data.connUserSocketId].signal(data.signal);\n};\nexport const removePeerConnection = data => {\n  const {\n    socketId\n  } = data;\n  const videoContainer = document.getElementById(socketId);\n  const videoEl = document.getElementById(`${socketId}-video`);\n\n  if (videoContainer && videoEl) {\n    const tracks = videoEl.srcObject.getTracks();\n    tracks.forEach(t => t.stop());\n    videoEl.srcObject = null;\n    videoContainer.removeChild(videoEl);\n    videoContainer.parentNode.removeChild(videoContainer);\n\n    if (peers[socketId]) {\n      peers[socketId].destroy();\n    }\n\n    delete peers[socketId];\n  }\n}; ////////////////////////////////// UI Videos //////////////////////////////////\n\nconst showLocalVideoPreview = stream => {\n  const videosContainer = document.getElementById(\"videos_portal\");\n  videosContainer.classList.add(\"videos_portal_styles\");\n  const videoContainer = document.createElement(\"div\");\n  videoContainer.classList.add(\"video_track_container\");\n  const videoElement = document.createElement(\"video\");\n  videoElement.autoplay = true;\n  videoElement.muted = true;\n  videoElement.srcObject = stream;\n\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  };\n\n  videoContainer.appendChild(videoElement);\n\n  if (store.getState().connectOnlyWithAudio) {\n    videoContainer.appendChild(getAudioOnlyLabel());\n  }\n\n  videosContainer.appendChild(videoContainer);\n};\n\nconst addStream = (stream, connUserSocketId) => {\n  //display incoming stream\n  const videosContainer = document.getElementById(\"videos_portal\");\n  const videoContainer = document.createElement(\"div\");\n  videoContainer.id = connUserSocketId;\n  videoContainer.classList.add(\"video_track_container\");\n  const videoElement = document.createElement(\"video\");\n  videoElement.autoplay = true;\n  videoElement.srcObject = stream;\n  videoElement.id = `${connUserSocketId}-video`;\n\n  videoElement.onloadedmetadata = () => {\n    videoElement.play();\n  };\n\n  videoElement.addEventListener(\"click\", () => {\n    if (videoElement.classList.contains(\"full_screen\")) {\n      videoElement.classList.remove(\"full_screen\");\n    } else {\n      videoElement.classList.add(\"full_screen\");\n    }\n  });\n  videoContainer.appendChild(videoElement); // check if other user connected only with audio\n\n  const participants = store.getState().participants;\n  const participant = participants.find(p => p.socketId === connUserSocketId);\n  console.log(participant);\n\n  if (participant === null || participant === void 0 ? void 0 : participant.onlyAudio) {\n    videoContainer.appendChild(getAudioOnlyLabel(participant.identity));\n  } else {\n    videoContainer.style.position = \"static\";\n  }\n\n  videosContainer.appendChild(videoContainer);\n};\n\nconst getAudioOnlyLabel = (identity = \"\") => {\n  const labelContainer = document.createElement(\"div\");\n  labelContainer.classList.add(\"label_only_audio_container\");\n  const label = document.createElement(\"p\");\n  label.classList.add(\"label_only_audio_text\");\n  label.innerHTML = `Only audio ${identity}`;\n  labelContainer.appendChild(label);\n  return labelContainer;\n}; ////////////////////////////////// Buttons logic //////////////////////////////////\n\n\nexport const toggleMic = isMuted => {\n  localStream.getAudioTracks()[0].enabled = isMuted ? true : false;\n};\nexport const toggleCamera = isDisabled => {\n  localStream.getVideoTracks()[0].enabled = isDisabled ? true : false;\n};\nexport const toggleScreenShare = (isScreenSharingActive, screenSharingStream = null) => {\n  if (isScreenSharingActive) {\n    switchVideoTracks(localStream);\n  } else {\n    switchVideoTracks(screenSharingStream);\n  }\n};\n\nconst switchVideoTracks = stream => {\n  for (let socket_id in peers) {\n    for (let index in peers[socket_id].streams[0].getTracks()) {\n      for (let index2 in stream.getTracks()) {\n        if (peers[socket_id].streams[0].getTracks()[index].kind === stream.getTracks()[index2].kind) {\n          peers[socket_id].replaceTrack(peers[socket_id].streams[0].getTracks()[index], stream.getTracks()[index2], peers[socket_id].streams[0]);\n          break;\n        }\n      }\n    }\n  }\n}; ////////////////////////////////// Messages /////////////////////////////////////\n\n\nconst appendNewMessage = messageData => {\n  const messages = store.getState().messages;\n  store.dispatch(setMessages([...messages, messageData]));\n};\n\nexport const sendMessageUsingDataChannel = messageContent => {\n  // append this message locally\n  const identity = store.getState().identity;\n  const localMessageData = {\n    content: messageContent,\n    identity,\n    messageCreatedByMe: true\n  };\n  appendNewMessage(localMessageData);\n  const messageData = {\n    content: messageContent,\n    identity\n  };\n  const stringifiedMessageData = JSON.stringify(messageData);\n\n  for (let socketId in peers) {\n    peers[socketId].send(stringifiedMessageData);\n  }\n};","map":{"version":3,"sources":["D:/development/torum/webRTC-advanced (1)/webRTC-advanced/to-be-deployed/my-app/src/utils/webRTCHandler.js"],"names":["setShowOverlay","setMessages","store","wss","Peer","fetchTURNCredentials","getTurnIceServers","defaultConstraints","audio","video","width","height","onlyAudioConstraints","localStream","getLocalPreviewAndInitRoomConnection","isRoomHost","identity","roomId","onlyAudio","constraints","navigator","mediaDevices","getUserMedia","then","stream","console","log","showLocalVideoPreview","dispatch","createNewRoom","joinRoom","catch","err","peers","streams","getConfiguration","turnIceServers","iceServers","urls","warn","messengerChannel","prepareNewPeerConnection","connUserSocketId","isInitiator","configuration","initiator","config","channelName","on","data","signalData","signal","signalPeerData","addStream","messageData","JSON","parse","appendNewMessage","handleSignalingData","removePeerConnection","socketId","videoContainer","document","getElementById","videoEl","tracks","srcObject","getTracks","forEach","t","stop","removeChild","parentNode","destroy","videosContainer","classList","add","createElement","videoElement","autoplay","muted","onloadedmetadata","play","appendChild","getState","connectOnlyWithAudio","getAudioOnlyLabel","id","addEventListener","contains","remove","participants","participant","find","p","style","position","labelContainer","label","innerHTML","toggleMic","isMuted","getAudioTracks","enabled","toggleCamera","isDisabled","getVideoTracks","toggleScreenShare","isScreenSharingActive","screenSharingStream","switchVideoTracks","socket_id","index","index2","kind","replaceTrack","messages","sendMessageUsingDataChannel","messageContent","localMessageData","content","messageCreatedByMe","stringifiedMessageData","stringify","send"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,KAAKC,GAAZ,MAAqB,OAArB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,oBAAT,EAA+BC,iBAA/B,QAAwD,QAAxD;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,IADkB;AAEzBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,KADF;AAELC,IAAAA,MAAM,EAAE;AAFH;AAFkB,CAA3B;AAQA,MAAMC,oBAAoB,GAAG;AAC3BJ,EAAAA,KAAK,EAAE,IADoB;AAE3BC,EAAAA,KAAK,EAAE;AAFoB,CAA7B;AAKA,IAAII,WAAJ;AAEA,OAAO,MAAMC,oCAAoC,GAAG,OAClDC,UADkD,EAElDC,QAFkD,EAGlDC,MAAM,GAAG,IAHyC,EAIlDC,SAJkD,KAK/C;AACH,QAAMb,oBAAoB,EAA1B;AAEA,QAAMc,WAAW,GAAGD,SAAS,GAAGN,oBAAH,GAA0BL,kBAAvD;AAEAa,EAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgBH,WADhB,EAEGI,IAFH,CAESC,MAAD,IAAY;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAb,IAAAA,WAAW,GAAGW,MAAd;AACAG,IAAAA,qBAAqB,CAACd,WAAD,CAArB,CAHgB,CAKhB;;AACAX,IAAAA,KAAK,CAAC0B,QAAN,CAAe5B,cAAc,CAAC,KAAD,CAA7B;AAEAe,IAAAA,UAAU,GACNZ,GAAG,CAAC0B,aAAJ,CAAkBb,QAAlB,EAA4BE,SAA5B,CADM,GAENf,GAAG,CAAC2B,QAAJ,CAAad,QAAb,EAAuBC,MAAvB,EAA+BC,SAA/B,CAFJ;AAGD,GAbH,EAcGa,KAdH,CAcUC,GAAD,IAAS;AACdP,IAAAA,OAAO,CAACC,GAAR,CACE,6DADF;AAGAD,IAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACD,GAnBH;AAoBD,CA9BM;AAgCP,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,OAAO,GAAG,EAAd;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAMC,cAAc,GAAG9B,iBAAiB,EAAxC;;AAEA,MAAI8B,cAAJ,EAAoB;AAClB,WAAO;AACLC,MAAAA,UAAU,EAAE,CACV;AACEC,QAAAA,IAAI,EAAE;AADR,OADU,EAIV,GAAGF,cAJO;AADP,KAAP;AAQD,GATD,MASO;AACLX,IAAAA,OAAO,CAACc,IAAR,CAAa,wBAAb;AACA,WAAO;AACLF,MAAAA,UAAU,EAAE,CACV;AACEC,QAAAA,IAAI,EAAE;AADR,OADU;AADP,KAAP;AAOD;AACF,CAtBD;;AAwBA,MAAME,gBAAgB,GAAG,WAAzB;AAEA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,gBAAD,EAAmBC,WAAnB,KAAmC;AACzE,QAAMC,aAAa,GAAGT,gBAAgB,EAAtC;AAEAF,EAAAA,KAAK,CAACS,gBAAD,CAAL,GAA0B,IAAItC,IAAJ,CAAS;AACjCyC,IAAAA,SAAS,EAAEF,WADsB;AAEjCG,IAAAA,MAAM,EAAEF,aAFyB;AAGjCpB,IAAAA,MAAM,EAAEX,WAHyB;AAIjCkC,IAAAA,WAAW,EAAEP;AAJoB,GAAT,CAA1B;AAOAP,EAAAA,KAAK,CAACS,gBAAD,CAAL,CAAwBM,EAAxB,CAA2B,QAA3B,EAAsCC,IAAD,IAAU;AAC7C;AAEA,UAAMC,UAAU,GAAG;AACjBC,MAAAA,MAAM,EAAEF,IADS;AAEjBP,MAAAA,gBAAgB,EAAEA;AAFD,KAAnB;AAKAvC,IAAAA,GAAG,CAACiD,cAAJ,CAAmBF,UAAnB;AACD,GATD;AAWAjB,EAAAA,KAAK,CAACS,gBAAD,CAAL,CAAwBM,EAAxB,CAA2B,QAA3B,EAAsCxB,MAAD,IAAY;AAC/CC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEA2B,IAAAA,SAAS,CAAC7B,MAAD,EAASkB,gBAAT,CAAT;AACAR,IAAAA,OAAO,GAAG,CAAC,GAAGA,OAAJ,EAAaV,MAAb,CAAV;AACD,GALD;AAOAS,EAAAA,KAAK,CAACS,gBAAD,CAAL,CAAwBM,EAAxB,CAA2B,MAA3B,EAAoCC,IAAD,IAAU;AAC3C,UAAMK,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWP,IAAX,CAApB;AACAQ,IAAAA,gBAAgB,CAACH,WAAD,CAAhB;AACD,GAHD;AAID,CAhCM;AAkCP,OAAO,MAAMI,mBAAmB,GAAIT,IAAD,IAAU;AAC3C;AACAhB,EAAAA,KAAK,CAACgB,IAAI,CAACP,gBAAN,CAAL,CAA6BS,MAA7B,CAAoCF,IAAI,CAACE,MAAzC;AACD,CAHM;AAKP,OAAO,MAAMQ,oBAAoB,GAAIV,IAAD,IAAU;AAC5C,QAAM;AAAEW,IAAAA;AAAF,MAAeX,IAArB;AACA,QAAMY,cAAc,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,QAAxB,CAAvB;AACA,QAAMI,OAAO,GAAGF,QAAQ,CAACC,cAAT,CAAyB,GAAEH,QAAS,QAApC,CAAhB;;AAEA,MAAIC,cAAc,IAAIG,OAAtB,EAA+B;AAC7B,UAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,CAAkBC,SAAlB,EAAf;AAEAF,IAAAA,MAAM,CAACG,OAAP,CAAgBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAtB;AAEAN,IAAAA,OAAO,CAACE,SAAR,GAAoB,IAApB;AACAL,IAAAA,cAAc,CAACU,WAAf,CAA2BP,OAA3B;AAEAH,IAAAA,cAAc,CAACW,UAAf,CAA0BD,WAA1B,CAAsCV,cAAtC;;AAEA,QAAI5B,KAAK,CAAC2B,QAAD,CAAT,EAAqB;AACnB3B,MAAAA,KAAK,CAAC2B,QAAD,CAAL,CAAgBa,OAAhB;AACD;;AACD,WAAOxC,KAAK,CAAC2B,QAAD,CAAZ;AACD;AACF,CApBM,C,CAsBP;;AACA,MAAMjC,qBAAqB,GAAIH,MAAD,IAAY;AACxC,QAAMkD,eAAe,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAxB;AACAW,EAAAA,eAAe,CAACC,SAAhB,CAA0BC,GAA1B,CAA8B,sBAA9B;AACA,QAAMf,cAAc,GAAGC,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAvB;AACAhB,EAAAA,cAAc,CAACc,SAAf,CAAyBC,GAAzB,CAA6B,uBAA7B;AACA,QAAME,YAAY,GAAGhB,QAAQ,CAACe,aAAT,CAAuB,OAAvB,CAArB;AACAC,EAAAA,YAAY,CAACC,QAAb,GAAwB,IAAxB;AACAD,EAAAA,YAAY,CAACE,KAAb,GAAqB,IAArB;AACAF,EAAAA,YAAY,CAACZ,SAAb,GAAyB1C,MAAzB;;AAEAsD,EAAAA,YAAY,CAACG,gBAAb,GAAgC,MAAM;AACpCH,IAAAA,YAAY,CAACI,IAAb;AACD,GAFD;;AAIArB,EAAAA,cAAc,CAACsB,WAAf,CAA2BL,YAA3B;;AAEA,MAAI5E,KAAK,CAACkF,QAAN,GAAiBC,oBAArB,EAA2C;AACzCxB,IAAAA,cAAc,CAACsB,WAAf,CAA2BG,iBAAiB,EAA5C;AACD;;AAEDZ,EAAAA,eAAe,CAACS,WAAhB,CAA4BtB,cAA5B;AACD,CArBD;;AAuBA,MAAMR,SAAS,GAAG,CAAC7B,MAAD,EAASkB,gBAAT,KAA8B;AAC9C;AACA,QAAMgC,eAAe,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAxB;AACA,QAAMF,cAAc,GAAGC,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAvB;AACAhB,EAAAA,cAAc,CAAC0B,EAAf,GAAoB7C,gBAApB;AAEAmB,EAAAA,cAAc,CAACc,SAAf,CAAyBC,GAAzB,CAA6B,uBAA7B;AACA,QAAME,YAAY,GAAGhB,QAAQ,CAACe,aAAT,CAAuB,OAAvB,CAArB;AACAC,EAAAA,YAAY,CAACC,QAAb,GAAwB,IAAxB;AACAD,EAAAA,YAAY,CAACZ,SAAb,GAAyB1C,MAAzB;AACAsD,EAAAA,YAAY,CAACS,EAAb,GAAmB,GAAE7C,gBAAiB,QAAtC;;AAEAoC,EAAAA,YAAY,CAACG,gBAAb,GAAgC,MAAM;AACpCH,IAAAA,YAAY,CAACI,IAAb;AACD,GAFD;;AAIAJ,EAAAA,YAAY,CAACU,gBAAb,CAA8B,OAA9B,EAAuC,MAAM;AAC3C,QAAIV,YAAY,CAACH,SAAb,CAAuBc,QAAvB,CAAgC,aAAhC,CAAJ,EAAoD;AAClDX,MAAAA,YAAY,CAACH,SAAb,CAAuBe,MAAvB,CAA8B,aAA9B;AACD,KAFD,MAEO;AACLZ,MAAAA,YAAY,CAACH,SAAb,CAAuBC,GAAvB,CAA2B,aAA3B;AACD;AACF,GAND;AAQAf,EAAAA,cAAc,CAACsB,WAAf,CAA2BL,YAA3B,EAxB8C,CA0B9C;;AACA,QAAMa,YAAY,GAAGzF,KAAK,CAACkF,QAAN,GAAiBO,YAAtC;AAEA,QAAMC,WAAW,GAAGD,YAAY,CAACE,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAAClC,QAAF,KAAelB,gBAAxC,CAApB;AACAjB,EAAAA,OAAO,CAACC,GAAR,CAAYkE,WAAZ;;AACA,MAAIA,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAE1E,SAAjB,EAA4B;AAC1B2C,IAAAA,cAAc,CAACsB,WAAf,CAA2BG,iBAAiB,CAACM,WAAW,CAAC5E,QAAb,CAA5C;AACD,GAFD,MAEO;AACL6C,IAAAA,cAAc,CAACkC,KAAf,CAAqBC,QAArB,GAAgC,QAAhC;AACD;;AAEDtB,EAAAA,eAAe,CAACS,WAAhB,CAA4BtB,cAA5B;AACD,CAtCD;;AAwCA,MAAMyB,iBAAiB,GAAG,CAACtE,QAAQ,GAAG,EAAZ,KAAmB;AAC3C,QAAMiF,cAAc,GAAGnC,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAvB;AACAoB,EAAAA,cAAc,CAACtB,SAAf,CAAyBC,GAAzB,CAA6B,4BAA7B;AAEA,QAAMsB,KAAK,GAAGpC,QAAQ,CAACe,aAAT,CAAuB,GAAvB,CAAd;AACAqB,EAAAA,KAAK,CAACvB,SAAN,CAAgBC,GAAhB,CAAoB,uBAApB;AACAsB,EAAAA,KAAK,CAACC,SAAN,GAAmB,cAAanF,QAAS,EAAzC;AAEAiF,EAAAA,cAAc,CAACd,WAAf,CAA2Be,KAA3B;AACA,SAAOD,cAAP;AACD,CAVD,C,CAYA;;;AAEA,OAAO,MAAMG,SAAS,GAAIC,OAAD,IAAa;AACpCxF,EAAAA,WAAW,CAACyF,cAAZ,GAA6B,CAA7B,EAAgCC,OAAhC,GAA0CF,OAAO,GAAG,IAAH,GAAU,KAA3D;AACD,CAFM;AAIP,OAAO,MAAMG,YAAY,GAAIC,UAAD,IAAgB;AAC1C5F,EAAAA,WAAW,CAAC6F,cAAZ,GAA6B,CAA7B,EAAgCH,OAAhC,GAA0CE,UAAU,GAAG,IAAH,GAAU,KAA9D;AACD,CAFM;AAIP,OAAO,MAAME,iBAAiB,GAAG,CAC/BC,qBAD+B,EAE/BC,mBAAmB,GAAG,IAFS,KAG5B;AACH,MAAID,qBAAJ,EAA2B;AACzBE,IAAAA,iBAAiB,CAACjG,WAAD,CAAjB;AACD,GAFD,MAEO;AACLiG,IAAAA,iBAAiB,CAACD,mBAAD,CAAjB;AACD;AACF,CATM;;AAWP,MAAMC,iBAAiB,GAAItF,MAAD,IAAY;AACpC,OAAK,IAAIuF,SAAT,IAAsB9E,KAAtB,EAA6B;AAC3B,SAAK,IAAI+E,KAAT,IAAkB/E,KAAK,CAAC8E,SAAD,CAAL,CAAiB7E,OAAjB,CAAyB,CAAzB,EAA4BiC,SAA5B,EAAlB,EAA2D;AACzD,WAAK,IAAI8C,MAAT,IAAmBzF,MAAM,CAAC2C,SAAP,EAAnB,EAAuC;AACrC,YACElC,KAAK,CAAC8E,SAAD,CAAL,CAAiB7E,OAAjB,CAAyB,CAAzB,EAA4BiC,SAA5B,GAAwC6C,KAAxC,EAA+CE,IAA/C,KACA1F,MAAM,CAAC2C,SAAP,GAAmB8C,MAAnB,EAA2BC,IAF7B,EAGE;AACAjF,UAAAA,KAAK,CAAC8E,SAAD,CAAL,CAAiBI,YAAjB,CACElF,KAAK,CAAC8E,SAAD,CAAL,CAAiB7E,OAAjB,CAAyB,CAAzB,EAA4BiC,SAA5B,GAAwC6C,KAAxC,CADF,EAEExF,MAAM,CAAC2C,SAAP,GAAmB8C,MAAnB,CAFF,EAGEhF,KAAK,CAAC8E,SAAD,CAAL,CAAiB7E,OAAjB,CAAyB,CAAzB,CAHF;AAKA;AACD;AACF;AACF;AACF;AACF,CAlBD,C,CAoBA;;;AACA,MAAMuB,gBAAgB,GAAIH,WAAD,IAAiB;AACxC,QAAM8D,QAAQ,GAAGlH,KAAK,CAACkF,QAAN,GAAiBgC,QAAlC;AACAlH,EAAAA,KAAK,CAAC0B,QAAN,CAAe3B,WAAW,CAAC,CAAC,GAAGmH,QAAJ,EAAc9D,WAAd,CAAD,CAA1B;AACD,CAHD;;AAKA,OAAO,MAAM+D,2BAA2B,GAAIC,cAAD,IAAoB;AAC7D;AACA,QAAMtG,QAAQ,GAAGd,KAAK,CAACkF,QAAN,GAAiBpE,QAAlC;AAEA,QAAMuG,gBAAgB,GAAG;AACvBC,IAAAA,OAAO,EAAEF,cADc;AAEvBtG,IAAAA,QAFuB;AAGvByG,IAAAA,kBAAkB,EAAE;AAHG,GAAzB;AAMAhE,EAAAA,gBAAgB,CAAC8D,gBAAD,CAAhB;AAEA,QAAMjE,WAAW,GAAG;AAClBkE,IAAAA,OAAO,EAAEF,cADS;AAElBtG,IAAAA;AAFkB,GAApB;AAKA,QAAM0G,sBAAsB,GAAGnE,IAAI,CAACoE,SAAL,CAAerE,WAAf,CAA/B;;AACA,OAAK,IAAIM,QAAT,IAAqB3B,KAArB,EAA4B;AAC1BA,IAAAA,KAAK,CAAC2B,QAAD,CAAL,CAAgBgE,IAAhB,CAAqBF,sBAArB;AACD;AACF,CArBM","sourcesContent":["import { setShowOverlay, setMessages } from \"../store/actions\";\r\nimport store from \"../store/store\";\r\nimport * as wss from \"./wss\";\r\nimport Peer from \"simple-peer\";\r\nimport { fetchTURNCredentials, getTurnIceServers } from \"./turn\";\r\n\r\nconst defaultConstraints = {\r\n  audio: true,\r\n  video: {\r\n    width: \"480\",\r\n    height: \"360\",\r\n  },\r\n};\r\n\r\nconst onlyAudioConstraints = {\r\n  audio: true,\r\n  video: false,\r\n};\r\n\r\nlet localStream;\r\n\r\nexport const getLocalPreviewAndInitRoomConnection = async (\r\n  isRoomHost,\r\n  identity,\r\n  roomId = null,\r\n  onlyAudio\r\n) => {\r\n  await fetchTURNCredentials();\r\n\r\n  const constraints = onlyAudio ? onlyAudioConstraints : defaultConstraints;\r\n\r\n  navigator.mediaDevices\r\n    .getUserMedia(constraints)\r\n    .then((stream) => {\r\n      console.log(\"successfuly received local stream\");\r\n      localStream = stream;\r\n      showLocalVideoPreview(localStream);\r\n\r\n      // dispatch an action to hide overlay\r\n      store.dispatch(setShowOverlay(false));\r\n\r\n      isRoomHost\r\n        ? wss.createNewRoom(identity, onlyAudio)\r\n        : wss.joinRoom(identity, roomId, onlyAudio);\r\n    })\r\n    .catch((err) => {\r\n      console.log(\r\n        \"error occurred when trying to get an access to local stream\"\r\n      );\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nlet peers = {};\r\nlet streams = [];\r\n\r\nconst getConfiguration = () => {\r\n  const turnIceServers = getTurnIceServers();\r\n\r\n  if (turnIceServers) {\r\n    return {\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n        ...turnIceServers,\r\n      ],\r\n    };\r\n  } else {\r\n    console.warn(\"Using only STUN server\");\r\n    return {\r\n      iceServers: [\r\n        {\r\n          urls: \"stun:stun.l.google.com:19302\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n};\r\n\r\nconst messengerChannel = \"messenger\";\r\n\r\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\r\n  const configuration = getConfiguration();\r\n\r\n  peers[connUserSocketId] = new Peer({\r\n    initiator: isInitiator,\r\n    config: configuration,\r\n    stream: localStream,\r\n    channelName: messengerChannel,\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"signal\", (data) => {\r\n    // webRTC offer, webRTC Answer (SDP informations), ice candidates\r\n\r\n    const signalData = {\r\n      signal: data,\r\n      connUserSocketId: connUserSocketId,\r\n    };\r\n\r\n    wss.signalPeerData(signalData);\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"stream\", (stream) => {\r\n    console.log(\"new stream came\");\r\n\r\n    addStream(stream, connUserSocketId);\r\n    streams = [...streams, stream];\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"data\", (data) => {\r\n    const messageData = JSON.parse(data);\r\n    appendNewMessage(messageData);\r\n  });\r\n};\r\n\r\nexport const handleSignalingData = (data) => {\r\n  //add signaling data to peer connection\r\n  peers[data.connUserSocketId].signal(data.signal);\r\n};\r\n\r\nexport const removePeerConnection = (data) => {\r\n  const { socketId } = data;\r\n  const videoContainer = document.getElementById(socketId);\r\n  const videoEl = document.getElementById(`${socketId}-video`);\r\n\r\n  if (videoContainer && videoEl) {\r\n    const tracks = videoEl.srcObject.getTracks();\r\n\r\n    tracks.forEach((t) => t.stop());\r\n\r\n    videoEl.srcObject = null;\r\n    videoContainer.removeChild(videoEl);\r\n\r\n    videoContainer.parentNode.removeChild(videoContainer);\r\n\r\n    if (peers[socketId]) {\r\n      peers[socketId].destroy();\r\n    }\r\n    delete peers[socketId];\r\n  }\r\n};\r\n\r\n////////////////////////////////// UI Videos //////////////////////////////////\r\nconst showLocalVideoPreview = (stream) => {\r\n  const videosContainer = document.getElementById(\"videos_portal\");\r\n  videosContainer.classList.add(\"videos_portal_styles\");\r\n  const videoContainer = document.createElement(\"div\");\r\n  videoContainer.classList.add(\"video_track_container\");\r\n  const videoElement = document.createElement(\"video\");\r\n  videoElement.autoplay = true;\r\n  videoElement.muted = true;\r\n  videoElement.srcObject = stream;\r\n\r\n  videoElement.onloadedmetadata = () => {\r\n    videoElement.play();\r\n  };\r\n\r\n  videoContainer.appendChild(videoElement);\r\n\r\n  if (store.getState().connectOnlyWithAudio) {\r\n    videoContainer.appendChild(getAudioOnlyLabel());\r\n  }\r\n\r\n  videosContainer.appendChild(videoContainer);\r\n};\r\n\r\nconst addStream = (stream, connUserSocketId) => {\r\n  //display incoming stream\r\n  const videosContainer = document.getElementById(\"videos_portal\");\r\n  const videoContainer = document.createElement(\"div\");\r\n  videoContainer.id = connUserSocketId;\r\n\r\n  videoContainer.classList.add(\"video_track_container\");\r\n  const videoElement = document.createElement(\"video\");\r\n  videoElement.autoplay = true;\r\n  videoElement.srcObject = stream;\r\n  videoElement.id = `${connUserSocketId}-video`;\r\n\r\n  videoElement.onloadedmetadata = () => {\r\n    videoElement.play();\r\n  };\r\n\r\n  videoElement.addEventListener(\"click\", () => {\r\n    if (videoElement.classList.contains(\"full_screen\")) {\r\n      videoElement.classList.remove(\"full_screen\");\r\n    } else {\r\n      videoElement.classList.add(\"full_screen\");\r\n    }\r\n  });\r\n\r\n  videoContainer.appendChild(videoElement);\r\n\r\n  // check if other user connected only with audio\r\n  const participants = store.getState().participants;\r\n\r\n  const participant = participants.find((p) => p.socketId === connUserSocketId);\r\n  console.log(participant);\r\n  if (participant?.onlyAudio) {\r\n    videoContainer.appendChild(getAudioOnlyLabel(participant.identity));\r\n  } else {\r\n    videoContainer.style.position = \"static\";\r\n  }\r\n\r\n  videosContainer.appendChild(videoContainer);\r\n};\r\n\r\nconst getAudioOnlyLabel = (identity = \"\") => {\r\n  const labelContainer = document.createElement(\"div\");\r\n  labelContainer.classList.add(\"label_only_audio_container\");\r\n\r\n  const label = document.createElement(\"p\");\r\n  label.classList.add(\"label_only_audio_text\");\r\n  label.innerHTML = `Only audio ${identity}`;\r\n\r\n  labelContainer.appendChild(label);\r\n  return labelContainer;\r\n};\r\n\r\n////////////////////////////////// Buttons logic //////////////////////////////////\r\n\r\nexport const toggleMic = (isMuted) => {\r\n  localStream.getAudioTracks()[0].enabled = isMuted ? true : false;\r\n};\r\n\r\nexport const toggleCamera = (isDisabled) => {\r\n  localStream.getVideoTracks()[0].enabled = isDisabled ? true : false;\r\n};\r\n\r\nexport const toggleScreenShare = (\r\n  isScreenSharingActive,\r\n  screenSharingStream = null\r\n) => {\r\n  if (isScreenSharingActive) {\r\n    switchVideoTracks(localStream);\r\n  } else {\r\n    switchVideoTracks(screenSharingStream);\r\n  }\r\n};\r\n\r\nconst switchVideoTracks = (stream) => {\r\n  for (let socket_id in peers) {\r\n    for (let index in peers[socket_id].streams[0].getTracks()) {\r\n      for (let index2 in stream.getTracks()) {\r\n        if (\r\n          peers[socket_id].streams[0].getTracks()[index].kind ===\r\n          stream.getTracks()[index2].kind\r\n        ) {\r\n          peers[socket_id].replaceTrack(\r\n            peers[socket_id].streams[0].getTracks()[index],\r\n            stream.getTracks()[index2],\r\n            peers[socket_id].streams[0]\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n////////////////////////////////// Messages /////////////////////////////////////\r\nconst appendNewMessage = (messageData) => {\r\n  const messages = store.getState().messages;\r\n  store.dispatch(setMessages([...messages, messageData]));\r\n};\r\n\r\nexport const sendMessageUsingDataChannel = (messageContent) => {\r\n  // append this message locally\r\n  const identity = store.getState().identity;\r\n\r\n  const localMessageData = {\r\n    content: messageContent,\r\n    identity,\r\n    messageCreatedByMe: true,\r\n  };\r\n\r\n  appendNewMessage(localMessageData);\r\n\r\n  const messageData = {\r\n    content: messageContent,\r\n    identity,\r\n  };\r\n\r\n  const stringifiedMessageData = JSON.stringify(messageData);\r\n  for (let socketId in peers) {\r\n    peers[socketId].send(stringifiedMessageData);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}